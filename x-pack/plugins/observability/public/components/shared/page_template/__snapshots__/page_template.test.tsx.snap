// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Page template Handles outputting the registered navigation structures within a side nav 1`] = `
<Fragment>
  <EuiTitle
    className="observabilitySideBar__header"
    size="xs"
  >
    <h2>
      <EuiAvatar
        className="observabilitySideBar__headerIcon"
        color="plain"
        iconColor={null}
        iconType="logoObservability"
        name="Observability"
      />
      Observability
    </h2>
  </EuiTitle>
  <EuiSideNav
    items={Array []}
  />
</Fragment>
`;

exports[`Page template Provides a working lazy wrapper 1`] = `
<Suspense
  fallback={null}
  pageHeader={
    Object {
      "pageTitle": "Test title",
      "rightSideItems": Array [
        <span>
          Test side item
        </span>,
      ],
    }
  }
>
  <lazy
    currentAppId$={
      Observable {
        "_isScalar": false,
        "_subscribe": [Function],
      }
    }
    getUrlForApp={[Function]}
    navigateToApp={[Function]}
    navigationSections$={
      Observable {
        "_isScalar": false,
        "operator": [Function],
        "source": Observable {
          "_isScalar": false,
          "operator": MergeMapOperator {
            "concurrent": 1,
            "project": [Function],
          },
          "source": Observable {
            "_isScalar": false,
            "_subscribe": [Function],
          },
        },
      }
    }
    pageHeader={
      Object {
        "pageTitle": "Test title",
        "rightSideItems": Array [
          <span>
            Test side item
          </span>,
        ],
      }
    }
  >
    <div>
      Test structure
    </div>
  </lazy>
</Suspense>
`;

exports[`Page template Utilises the KibanaPageTemplate for rendering 1`] = `
<KibanaPageTemplate
  pageHeader={
    Object {
      "pageTitle": "Test title",
      "rightSideItems": Array [
        <span>
          Test side item
        </span>,
      ],
    }
  }
  pageSideBar={
    <ObservabilitySideNav
      currentAppId$={
        Observable {
          "_isScalar": false,
          "_subscribe": [Function],
        }
      }
      getUrlForApp={[Function]}
      navigateToApp={[Function]}
      navigationSections$={
        Observable {
          "_isScalar": false,
          "operator": [Function],
          "source": Observable {
            "_isScalar": false,
            "operator": MergeMapOperator {
              "concurrent": 1,
              "project": [Function],
            },
            "source": Observable {
              "_isScalar": false,
              "_subscribe": [Function],
            },
          },
        }
      }
    />
  }
  pageSideBarProps={
    Object {
      "className": "observabilitySideBar",
      "sticky": true,
    }
  }
  restrictWidth={false}
>
  <div>
    Test structure
  </div>
</KibanaPageTemplate>
`;
